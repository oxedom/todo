(()=>{"use strict";function e(){function e(e){return e.split(" ")}function t(e,t){t.forEach((t=>{e.classList.add(t)}))}return{getID:function(){return"_"+Math.random().toString(36).substr(2,9)},classAdder:t,splitString:e,stringToClass:function(n,s){t(n,e(s))},getFormData:e=>{const t=new FormData(e.target);return Object.fromEntries(t)},toogleElement:function(e){let t=document.getElementById(e);t.classList.contains("d-none")?t.classList.remove("d-none"):t.classList.add("d-none")}}}const t={events:{},subscribe:function(e,t){console.log(`PUBSUB: someone just subscribed to know about ${e}`),this.events[e]=this.events[e]||[],this.events[e].push(t)},unsubscribe:function(e,t){console.log(`PUBSUB: someone just UNsubscribed from ${e}`),this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))},publish:function(e,t){console.log(`PUBSUB: Making an broadcast about ${e} with ${t}`),this.events[e]&&this.events[e].forEach((e=>{e(t)}))}};function n(){const n=function(){let e=[];return{addTask:t=>{e.push(t),console.log(e)},removeTask:t=>{var n=e.map((e=>e.id)).indexOf(t);e.splice(n,1)}}}(),s=e(),o=document.createElement("div"),r=document.createElement("div"),a=document.createElement("div"),c=document.createElement("div");return s.stringToClass(o,"col-8 container-sm bg-light card-body"),s.stringToClass(r,"container-md card m-2 p-1 mr-1"),s.stringToClass(a,"container row"),s.stringToClass(c,"col-1 bg-light"),a.style="gap: 10px",r.append(a),o.append(r),t.subscribe("handleRemove",(function(e){e.remove()})),t.subscribe("handleRemove",(function(e){n.removeTask(e.id)})),t.subscribe("newTask",(e=>{var n;n=function(e){const n=document.createElement("div"),o=document.createElement("p"),r=document.createElement("p"),a=document.createElement("button"),c=document.createElement("button"),i=document.createElement("hr");return s.stringToClass(o,"m-2 col-xl"),s.stringToClass(r,"m-2 col-l"),s.stringToClass(a,"btn btn-outline-primary col-sm pl-2"),s.stringToClass(c,"btn btn-outline-danger col-sm"),n.append(o,c,a),a.innerText="DONE",c.innerText="Remove",console.log(e),r.innerText=`Belongs to Project group: ${e.project}`,o.innerText=e.taskName,o.style="flex-grow: 10",n.setAttribute("id",e.id),n.append(o,r,c,a,i),a.addEventListener("click",(e=>{t.publish("handleDone",e.target.parentNode)})),c.addEventListener("click",(e=>{t.publish("handleRemove",e.target.parentNode)})),n}(e),a.append(n)})),t.subscribe("newTask",(e=>{!function(e){let s=function(e){let n=e.taskName,s=e.project;return(new Date).getDate(),{removeSelf:()=>{t.publish("removeTask")},getName:()=>n,getTaskProject:()=>s}}(e);n.addTask(s)}(e)})),t.subscribe("removeTask",(e=>n.removeTask)),o}document.addEventListener("DOMContentLoaded",(s=>{let o=document.getElementById("content");const r=function(){const t=e(),n=document.createElement("nav"),s=document.createElement("div"),o=document.createElement("a");return t.stringToClass(n,"navbar navbar-expand-md navbar-dark bg-dark"),t.stringToClass(s,"container-fluid"),t.stringToClass(o,"navbar-brand"),o.innerText="Todolist",s.append(o),n.append(s),n}(),a=function(){const n=e(),s=document.createElement("div"),o=document.createElement("a"),r=document.createElement("img"),a=document.createElement("span"),c=document.createElement("hr"),i=document.createElement("ul"),l=document.createElement("form"),d=document.createElement("div"),u=document.createElement("form"),m=document.createElement("div"),p=document.createElement("button"),b=document.createElement("input"),g=(document.createElement("area"),document.createElement("input")),v=document.createElement("button"),T=document.createElement("div"),E=document.createElement("button"),f=document.createElement("button"),h="form-control",k="btn btn-outline-primary";n.stringToClass(s,"d-flex flex-column flex-shrink-0 p-3 bg-light col-3 border"),n.stringToClass(r,"m-2"),n.stringToClass(o,"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none"),n.stringToClass(a,"fs-4"),n.stringToClass(i,"nav nav-pills flex-column mb-auto"),n.stringToClass(T,"b-example-divider d-flex justify-content-center"),n.stringToClass(E,"btn btn-primay"),n.stringToClass(f,"btn btn-primay m-2"),n.stringToClass(l,"form-group m-2 p-1 input-group d-none"),n.stringToClass(u,"form-group m-2 p-1 input-group d-none"),n.stringToClass(m,"d-flex justify-content-center"),n.stringToClass(g,h),n.stringToClass(v,k),n.stringToClass(p,k),n.stringToClass(b,h),s.style="width: 280px;",a.innerText="Projects",r.style="width: 30px",E.innerText="+ New Project",f.innerText="+ Task",d.style="width: 150px;",m.style="width: 200px",v.innerText="+",p.innerText="+",g.setAttribute("placeholder","New Project"),b.setAttribute("placeholder","New Task"),i.setAttribute("id","projectUl"),r.setAttribute("src","../sandbox/public/todo.svg"),l.setAttribute("action","submit"),l.setAttribute("id","formProject"),u.setAttribute("action","submit"),u.setAttribute("id","formTask"),u.setAttribute("name","taskForm"),b.setAttribute("name","taskName"),g.setAttribute("name","name");const C=function(){const e=[];return{addProject:t=>{e.push(t),console.log(e)},getLength:()=>e.length}}();return l.addEventListener("submit",(e=>{e.preventDefault();let s=n.getFormData(e);t.publish("liSubmit",s.name),t.publish("newProject",s),l.reset()})),t.subscribe("newProject",(function(e){let t={name:e.name,dateCreated:(new Date).getDate()};C.addProject(t)})),u.addEventListener("submit",(e=>{e.preventDefault();let s=n.getFormData(e);document.get;const o=document.querySelectorAll('[selected="true"]');0==o.length?alert("Need to Select Project"):(console.log("weeee wewwe"),console.log(o),s.project=o[0].innerText,s.id=n.getID(),console.log(s),C.getLength()>=1?(t.publish("newTask",s),u.reset()):alert("NEED ATLEAST ONE PROJECT"))})),E.addEventListener("click",(e=>{t.publish("toogleForm","formProject")})),f.addEventListener("click",(e=>{t.publish("toogleTask","formTask")})),t.subscribe("toogleForm",n.toogleElement),t.subscribe("toogleTask",n.toogleElement),t.subscribe("liSubmit",(function(e){const s=document.createElement("li"),o=document.createElement("a");return n.stringToClass(s,"nav-item m-2"),n.stringToClass(o,"nav-link active"),o.innerText=e,s.append(o),t.publish("createLi",s),s.addEventListener("click",(e=>{t.publish("projectClicked",e.target)})),s})),t.subscribe("projectClicked",(function(e){let t=document.getElementById("projectUl").childNodes;for(let e=0;e<t.length;e++)t[e].classList.remove("bg-success"),t[e].childNodes.forEach((e=>{e.classList.remove("bg-success")}));e.classList.add("bg-success")})),t.subscribe("projectClicked",(function(e){let t=document.getElementById("projectUl").childNodes;for(let n=0;n<t.length;n++)t[n].removeAttribute("selected"),t[n].childNodes.forEach((e=>{e.removeAttribute("selected")})),e.setAttribute("selected","true")})),t.subscribe("createLi",(function(e){document.querySelector("ul").append(e)})),o.append(r,a),d.append(g),l.append(v),l.append(d),u.append(p,b),m.append(u),s.append(o),s.append(E),s.append(f),s.append(l),s.append(m),s.append(c),s.append(i),s.append(T),{divSidebar:s}}().divSidebar,c=n();o.append(r);const i=document.createElement("div");i.classList.add("row"),i.append(a),i.append(c),o.append(i)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,