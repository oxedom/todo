(()=>{"use strict";function e(){function e(e){return e.split(" ")}function t(e,t){t.forEach((t=>{e.classList.add(t)}))}return{getID:function(){return"_"+Math.random().toString(36).substr(2,9)},classAdder:t,splitString:e,stringToClass:function(n,s){t(n,e(s))}}}const t={events:{},subscribe:function(e,t){console.log(`PUBSUB: someone just subscribed to know about ${e}`),this.events[e]=this.events[e]||[],this.events[e].push(t)},unsubscribe:function(e,t){console.log(`PUBSUB: someone just UNsubscribed from ${e}`),this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))},publish:function(e,t){console.log(`PUBSUB: Making an broadcast about ${e} with ${t}`),this.events[e]&&this.events[e].forEach((e=>{e(t)}))}};document.addEventListener("DOMContentLoaded",(n=>{let s=document.getElementById("content");const o=function(){const t=e(),n=document.createElement("nav"),s=document.createElement("div"),o=document.createElement("a");return t.stringToClass(n,"navbar navbar-expand-md navbar-dark bg-dark"),t.stringToClass(s,"container-fluid"),t.stringToClass(o,"navbar-brand"),o.innerText="Todolist",s.append(o),n.append(s),n}(),i=function(){const n=e(),s=document.createElement("div"),o=document.createElement("a"),i=document.createElement("img"),r=document.createElement("span"),a=document.createElement("hr"),c=document.createElement("ul"),d=document.createElement("form"),l=document.createElement("div"),u=document.createElement("input"),m=document.createElement("button"),p=document.createElement("div"),b=document.createElement("button");function g(e){const s=document.createElement("li"),o=document.createElement("a"),i=document.createElement("svg");return n.stringToClass(s,"nav-item m-2"),n.stringToClass(o,"nav-link active"),n.stringToClass(i,"bi me-2"),o.innerText=e,i.setAttribute("width",16),i.setAttribute("height",16),o.append(i),s.append(o),t.publish("createLi",s),s}return n.stringToClass(s,"d-flex flex-column flex-shrink-0 p-3 bg-light col-3 border"),n.stringToClass(i,"m-2"),n.stringToClass(o,"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none"),n.stringToClass(r,"fs-4"),n.stringToClass(c,"nav nav-pills flex-column mb-auto"),n.stringToClass(p,"b-example-divider d-flex justify-content-center"),n.stringToClass(b,"btn btn-primay"),n.stringToClass(d,"form-group m-2 p-1 input-group d-none"),n.stringToClass(u,"form-control"),n.stringToClass(m,"btn btn-outline-primary"),s.style="width: 280px;",r.innerText="Projects",i.style="width: 30px",b.innerText="+ New Project",l.style="width: 150px;",m.innerText="Add",i.setAttribute("src","../sandbox/public/todo.svg"),d.setAttribute("action","submit"),d.setAttribute("id","form"),u.setAttribute("name","name"),d.addEventListener("submit",(e=>{e.preventDefault();let n=e.target[1].value;t.publish("liSubmit",n),d.reset()})),b.addEventListener("click",(e=>{t.publish("toogleForm","form")})),t.subscribe("toogleForm",(function(e){let t=document.getElementById(e);t.classList.contains("d-none")?t.classList.remove("d-none"):t.classList.add("d-none")})),t.subscribe("liSubmit",g),t.subscribe("createLi",(function(e){document.querySelector("ul").append(e)})),o.append(i,r),l.append(u),d.append(m),d.append(l),s.append(o),s.append(b),s.append(d),s.append(a),s.append(c),s.append(p),{divSidebar:s,createLi:g,ul:c}}().divSidebar,r=function(){const t=e(),n=document.createElement("div"),s=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div");return t.stringToClass(n,"col-8 container-sm bg-light card-body"),t.stringToClass(s,"container-md card m-2 p-1 mr-1"),t.stringToClass(o,"container row"),t.stringToClass(i,"col-1 bg-light"),o.style="gap: 10px",s.append(o),n.append(s),n}();s.append(o);const a=document.createElement("div");a.classList.add("row"),a.append(i),a.append(r),s.append(a)})),console.log("amit")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,