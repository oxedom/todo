(()=>{"use strict";function e(){function e(e){return e.split(" ")}function t(e,t){t.forEach((t=>{e.classList.add(t)}))}return{getID:function(){return"_"+Math.random().toString(36).substr(2,9)},classAdder:t,splitString:e,stringToClass:function(n,s){t(n,e(s))},getFormData:e=>{const t=new FormData(e.target);return Object.fromEntries(t)},toogleElement:function(e){let t=document.getElementById(e);t.classList.contains("d-none")?t.classList.remove("d-none"):t.classList.add("d-none")}}}const t={events:{},subscribe:function(e,t){console.log(`PUBSUB: someone just subscribed to know about ${e}`),this.events[e]=this.events[e]||[],this.events[e].push(t)},unsubscribe:function(e,t){console.log(`PUBSUB: someone just UNsubscribed from ${e}`),this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))},publish:function(e,t){console.log(`PUBSUB: Making an broadcast about ${e} with ${t}`),this.events[e]&&this.events[e].forEach((e=>{e(t)}))}};function n(){const n=function(){let e=[];return{addTask:t=>{e.push(t),console.log(e)},removeTask:t=>{let n;for(let s=0;s<e.length;s++)e[s].getId()==t&&(n=s),null==n&&-1==n||e.splice(n,1)},changeStatusbyID:t=>{let n;for(let s=0;s<e.length;s++)e[s].getId()==t&&(n=s),null==n&&-1==n||e[n].changeStatus()}}}(),s=e(),o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),a=document.createElement("div");return s.stringToClass(o,"col-8 container-sm bg-light card-body"),s.stringToClass(r,"container-md card m-2 p-1 mr-1"),s.stringToClass(c,"container row"),s.stringToClass(a,"col-1 bg-light"),c.style="gap: 10px",r.append(c),o.append(r),t.subscribe("handleDone",(function(e){let t=e.id;n.changeStatusbyID(t)})),t.subscribe("handleDone",(function(e){const t=e.childNodes[3];t.classList.contains("btn-success")?t.classList.remove("btn-success"):t.classList.add("btn-success")})),t.subscribe("handleRemove",(function(e){e.remove()})),t.subscribe("handleRemove",(function(e){n.removeTask(e.id)})),t.subscribe("newTask",(e=>{var n;n=function(e){const n=document.createElement("div"),o=document.createElement("p"),r=document.createElement("p"),c=document.createElement("button"),a=document.createElement("button"),i=document.createElement("hr");return s.stringToClass(o,"m-2 col-xl"),s.stringToClass(r,"m-2 col-l"),s.stringToClass(c,"btn btn-outline-primary col-sm pl-2"),s.stringToClass(a,"btn btn-outline-danger col-sm"),n.append(o,a,c),c.innerText="DONE",a.innerText="Remove",console.log(e),r.innerText=`Belongs to Project group: ${e.project}`,o.innerText=e.taskName,o.style="flex-grow: 10",n.setAttribute("id",e.id),n.append(o,r,a,c,i),c.addEventListener("click",(e=>{t.publish("handleDone",e.target.parentNode)})),a.addEventListener("click",(e=>{t.publish("handleRemove",e.target.parentNode)})),n}(e),c.append(n)})),t.subscribe("newTask",(e=>{!function(e){let t=function(e){let t=e.taskName,n=e.project,s=((new Date).getDate(),e.id),o=!1;return{getName:()=>t,getTaskProject:()=>n,getId:()=>s,changeStatus:()=>{o=!o,console.log(o)}}}(e);n.addTask(t)}(e)})),t.subscribe("removeTask",(e=>n.removeTask)),o}document.addEventListener("DOMContentLoaded",(s=>{let o=document.getElementById("content");const r=function(){const t=e(),n=document.createElement("nav"),s=document.createElement("div"),o=document.createElement("a");return t.stringToClass(n,"navbar navbar-expand-md navbar-dark bg-dark"),t.stringToClass(s,"container-fluid"),t.stringToClass(o,"navbar-brand"),o.innerText="Todolist",s.append(o),n.append(s),n}(),c=function(){const n=e(),s=document.createElement("div"),o=document.createElement("a"),r=document.createElement("img"),c=document.createElement("span"),a=document.createElement("hr"),i=document.createElement("ul"),l=document.createElement("form"),d=document.createElement("div"),u=document.createElement("form"),m=document.createElement("div"),p=document.createElement("button"),b=document.createElement("input"),g=(document.createElement("area"),document.createElement("input")),h=document.createElement("button"),T=document.createElement("div"),f=document.createElement("button"),v=document.createElement("button"),E="form-control",k="btn btn-outline-primary";n.stringToClass(s,"d-flex flex-column flex-shrink-0 p-3 bg-light col-3 border"),n.stringToClass(r,"m-2"),n.stringToClass(o,"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none"),n.stringToClass(c,"fs-4"),n.stringToClass(i,"nav nav-pills flex-column mb-auto"),n.stringToClass(T,"b-example-divider d-flex justify-content-center"),n.stringToClass(f,"btn btn-primay"),n.stringToClass(v,"btn btn-primay m-2"),n.stringToClass(l,"form-group m-2 p-1 input-group d-none"),n.stringToClass(u,"form-group m-2 p-1 input-group d-none"),n.stringToClass(m,"d-flex justify-content-center"),n.stringToClass(g,E),n.stringToClass(h,k),n.stringToClass(p,k),n.stringToClass(b,E),s.style="width: 280px;",c.innerText="Projects",r.style="width: 30px",f.innerText="+ New Project",v.innerText="+ Task",d.style="width: 150px;",m.style="width: 200px",h.innerText="+",p.innerText="+",g.setAttribute("placeholder","New Project"),b.setAttribute("placeholder","New Task"),i.setAttribute("id","projectUl"),r.setAttribute("src","../sandbox/public/todo.svg"),l.setAttribute("action","submit"),l.setAttribute("id","formProject"),u.setAttribute("action","submit"),u.setAttribute("id","formTask"),u.setAttribute("name","taskForm"),b.setAttribute("name","taskName"),g.setAttribute("name","name");const C=function(){const e=[];return{addProject:t=>{e.push(t),console.log(e)},getLength:()=>e.length}}();return l.addEventListener("submit",(e=>{e.preventDefault();let s=n.getFormData(e);t.publish("liSubmit",s.name),t.publish("newProject",s),l.reset()})),t.subscribe("newProject",(function(e){let t={name:e.name,dateCreated:(new Date).getDate()};C.addProject(t)})),u.addEventListener("submit",(e=>{e.preventDefault();let s=n.getFormData(e);document.get;const o=document.querySelectorAll('[selected="true"]');0==o.length?alert("Need to Select Project"):(console.log("weeee wewwe"),console.log(o),s.project=o[0].innerText,s.id=n.getID(),console.log(s),C.getLength()>=1?(t.publish("newTask",s),u.reset()):alert("NEED ATLEAST ONE PROJECT"))})),f.addEventListener("click",(e=>{t.publish("toogleForm","formProject")})),v.addEventListener("click",(e=>{t.publish("toogleTask","formTask")})),t.subscribe("toogleForm",n.toogleElement),t.subscribe("toogleTask",n.toogleElement),t.subscribe("liSubmit",(function(e){const s=document.createElement("li"),o=document.createElement("a");return n.stringToClass(s,"nav-item m-2"),n.stringToClass(o,"nav-link active"),o.innerText=e,s.append(o),t.publish("createLi",s),s.addEventListener("click",(e=>{t.publish("projectClicked",e.target)})),s})),t.subscribe("projectClicked",(function(e){let t=document.getElementById("projectUl").childNodes;for(let e=0;e<t.length;e++)t[e].classList.remove("bg-success"),t[e].childNodes.forEach((e=>{e.classList.remove("bg-success")}));e.classList.add("bg-success")})),t.subscribe("projectClicked",(function(e){let t=document.getElementById("projectUl").childNodes;for(let n=0;n<t.length;n++)t[n].removeAttribute("selected"),t[n].childNodes.forEach((e=>{e.removeAttribute("selected")})),e.setAttribute("selected","true")})),t.subscribe("createLi",(function(e){document.querySelector("ul").append(e)})),o.append(r,c),d.append(g),l.append(h),l.append(d),u.append(p,b),m.append(u),s.append(o),s.append(f),s.append(v),s.append(l),s.append(m),s.append(a),s.append(i),s.append(T),{divSidebar:s}}().divSidebar,a=n();o.append(r);const i=document.createElement("div");i.classList.add("row"),i.append(c),i.append(a),o.append(i)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,