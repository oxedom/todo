(()=>{"use strict";function e(){function e(e){return e.split(" ")}function t(e,t){t.forEach((t=>{e.classList.add(t)}))}return{getID:function(){return"_"+Math.random().toString(36).substr(2,9)},classAdder:t,splitString:e,stringToClass:function(n,a){t(n,e(a))}}}function t(){const t=e(),n=document.createElement("div"),a=document.createElement("a"),r=document.createElement("img"),d=document.createElement("span"),o=document.createElement("hr"),s=document.createElement("ul"),i=(document.createElement("hr"),document.createElement("div")),c=document.createElement("button");return t.stringToClass(n,"d-flex flex-column flex-shrink-0 p-3 bg-light col-3 border"),t.stringToClass(a,"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none"),t.stringToClass(r,"m-2"),t.stringToClass(d,"fs-4"),t.stringToClass(s,"nav nav-pills flex-column mb-auto"),t.stringToClass(i,"b-example-divider d-flex justify-content-center"),t.stringToClass(c,"btn btn-primay"),n.style="width: 280px; flex-grow: 1;",r.style="width: 30px",r.setAttribute("src","../sandbox/public/todo.svg"),a.append(d,r),i.append(c),n.append(a),n.append(o),n.append(s),n.append(o),n.append(i),{divSidebar:n,addProjectLi:()=>{const e=document.createElement("li"),n=document.createElement("a"),a=document.createElement("svg");return t.stringToClass(e,"nav-item"),t.stringToClass(n,"nav-link active"),t.stringToClass(a,"bi me-2"),n.innerText="Home",a.setAttribute("width",16),a.setAttribute("height",16),n.append(a),e.append(n),e},ul:s}}document.addEventListener("DOMContentLoaded",(n=>{console.log("pizza");let a=document.getElementById("content");const r=function(){const t=e(),n=document.createElement("nav"),a=document.createElement("div"),r=document.createElement("a");return t.stringToClass(n,"navbar navbar-expand-md navbar-dark bg-dark"),t.stringToClass(a,"container-fluid"),t.stringToClass(r,"navbar-brand"),r.innerText="Todolist",a.append(r),n.append(a),n}(),d=t().divSidebar;a.append(r);const o=document.createElement("div");o.classList.add("row"),o.append(d),a.append(o),document.querySelector("ul").append(t().addProjectLi())})),console.log("amit")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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d2VicGFjazovL3RvZG8vLi9zcmMvanMvbGlicy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2pzL3NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9qcy9kb20uanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9qcy9uYXZiYXIuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9qcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhciB9IGZyb20gXCJkYXRlLWZucy9sb2NhbGVcIjtcblxuICAgIFxuXG5cbmV4cG9ydCBmdW5jdGlvbiBsaWJzKCl7XG5cbiAgICBmdW5jdGlvbiBzcGxpdFN0cmluZyAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoXCIgXCIpXG4gICAgICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsYXNzQWRkZXIgKGVsZW1lbnQsYXJyYXkpIHtcbiAgICAgICAgYXJyYXkuZm9yRWFjaChzdHJpbmcgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKHN0cmluZylcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RyaW5nVG9DbGFzcyAoZWxlbWVudCxzdHJpbmcpIHtcbiAgICAgICAgbGV0IGFyciA9IHNwbGl0U3RyaW5nKHN0cmluZylcbiAgICAgICAgY2xhc3NBZGRlcihlbGVtZW50LGFycilcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJRCgpIHtcbiAgICAgICAgcmV0dXJuICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbiAgICB9XG5cbiBcblxuICAgIHJldHVybiB7Z2V0SUQsY2xhc3NBZGRlcixzcGxpdFN0cmluZyxzdHJpbmdUb0NsYXNzfVxuXG59XG5cblxuICBcblxuXG5cblxuIiwiXG5cbmltcG9ydCB7IGxpYnMgfSBmcm9tIFwiLi9saWJzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaWRlYmFyKCkge1xuXG4gICAgLy9JTklUIExJQlNcbiAgICBjb25zdCBsaWJzSGVscGVyID0gbGlicygpXG5cbiAgICAvL0NSRUFURSBFTEVNRU5UU1xuICAgIGNvbnN0IGRpdlNpZGViYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgY29uc3QgaHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdocicpO1xuICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKVxuICAgIGNvbnN0IGhyMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hyJyk7XG5cbiAgICAvL0RpdmRlclxuICAgIGNvbnN0IGRpdkRpdmRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgYnRuRGl2aWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICAvL0NMQVNTIFNUUklORyBGUk9NIEhUTUwgQk9JTEVSIFBMQVRFXG4gICAgY29uc3QgZGl2U2lkZWJhckNsYXNzID0gJ2QtZmxleCBmbGV4LWNvbHVtbiBmbGV4LXNocmluay0wIHAtMyBiZy1saWdodCBjb2wtMyBib3JkZXInXG4gICAgY29uc3QgYUNsYXNzID0gXCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1iLTMgbWItbWQtMCBtZS1tZC1hdXRvIGxpbmstZGFyayB0ZXh0LWRlY29yYXRpb24tbm9uZVwiXG4gICAgY29uc3QgaW1nQ2xhc3MgPSAnbS0yJ1xuICAgIGNvbnN0IHNwYW5DbGFzcyA9ICdmcy00J1xuICAgIC8vIGNvbnN0IGhyQ2xhc3MgPSAnJ1xuICAgIGNvbnN0IHVsQ2xhc3MgPSAnbmF2IG5hdi1waWxscyBmbGV4LWNvbHVtbiBtYi1hdXRvJ1xuICAgIC8vIGNvbnN0IGhyMkNsYXNzID0gJydcbiAgICBjb25zdCBkaXZEaXZkZUNsYXNzID0gJ2ItZXhhbXBsZS1kaXZpZGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyJ1xuICAgIGNvbnN0IGJ0bkRpdmlkZUNsYXNzID0gJ2J0biBidG4tcHJpbWF5J1xuXG4gICAgbGlic0hlbHBlci5zdHJpbmdUb0NsYXNzKGRpdlNpZGViYXIsIGRpdlNpZGViYXJDbGFzcylcbiAgICBsaWJzSGVscGVyLnN0cmluZ1RvQ2xhc3MoYSwgYUNsYXNzKVxuICAgIGxpYnNIZWxwZXIuc3RyaW5nVG9DbGFzcyhpbWcsIGltZ0NsYXNzKVxuICAgIGxpYnNIZWxwZXIuc3RyaW5nVG9DbGFzcyhzcGFuLCBzcGFuQ2xhc3MpXG4gICAgLy8gbGlic0hlbHBlci5zdHJpbmdUb0NsYXNzKGhyLCBockNsYXNzKVxuICAgIGxpYnNIZWxwZXIuc3RyaW5nVG9DbGFzcyh1bCwgdWxDbGFzcylcbiAgICAvLyBsaWJzSGVscGVyLnN0cmluZ1RvQ2xhc3MoaHIyLCBocjJDbGFzcylcbiAgICBsaWJzSGVscGVyLnN0cmluZ1RvQ2xhc3MoZGl2RGl2ZGUsIGRpdkRpdmRlQ2xhc3MpXG4gICAgbGlic0hlbHBlci5zdHJpbmdUb0NsYXNzKGJ0bkRpdmlkZSwgYnRuRGl2aWRlQ2xhc3MpXG5cblxuXG4gICAgZGl2U2lkZWJhci5zdHlsZSA9ICd3aWR0aDogMjgwcHg7IGZsZXgtZ3JvdzogMTsnXG4gICAgaW1nLnN0eWxlID0gJ3dpZHRoOiAzMHB4J1xuXG4gICAgaW1nLnNldEF0dHJpYnV0ZSgnc3JjJywgJy4uL3NhbmRib3gvcHVibGljL3RvZG8uc3ZnJylcblxuXG4gICAgY29uc3QgYWRkUHJvamVjdExpID0gKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgY29uc3Qgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3ZnJyk7XG5cbiAgICAgICAgY29uc3QgbGlDbGFzcyA9ICduYXYtaXRlbSdcbiAgICAgICAgY29uc3QgYUNMYXNzID0gJ25hdi1saW5rIGFjdGl2ZSdcbiAgICAgICAgY29uc3Qgc3ZnQ2xhc3MgPSAnYmkgbWUtMidcblxuXG4gICAgICAgIC8vIGNsYXNzZXMgXG4gICAgICAgIGxpYnNIZWxwZXIuc3RyaW5nVG9DbGFzcyhsaSwgbGlDbGFzcylcbiAgICAgICAgbGlic0hlbHBlci5zdHJpbmdUb0NsYXNzKGEsIGFDTGFzcylcbiAgICAgICAgbGlic0hlbHBlci5zdHJpbmdUb0NsYXNzKHN2Zywgc3ZnQ2xhc3MpXG5cbiAgICAgICAgLy9hIGxpbmsgUHJvcHNcbiAgICAgICAgYS5pbm5lclRleHQgPSAnSG9tZSdcblxuICAgICAgICAvL1NWRyBQcm9wc1xuXG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgMTYpXG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIDE2KVxuICAgICAgICAvLyBzdmcuc2V0QXR0cmlidXRlKCd4bGluaycsICcjc3BlZWRvbWV0ZXIyJylcblxuICAgICAgICBhLmFwcGVuZChzdmcpXG5cbiAgICAgICAgbGkuYXBwZW5kKGEpXG5cbiAgICAgICAgcmV0dXJuIGxpXG4gICAgfVxuXG5cblxuXG5cblxuICAgIGEuYXBwZW5kKHNwYW4sIGltZylcbiAgICBkaXZEaXZkZS5hcHBlbmQoYnRuRGl2aWRlKVxuXG4gICAgZGl2U2lkZWJhci5hcHBlbmQoYSlcbiAgICBkaXZTaWRlYmFyLmFwcGVuZChocilcbiAgICBkaXZTaWRlYmFyLmFwcGVuZCh1bClcbiAgICBkaXZTaWRlYmFyLmFwcGVuZChocilcbiAgICBkaXZTaWRlYmFyLmFwcGVuZChkaXZEaXZkZSlcblxuICAgIHJldHVybiB7IGRpdlNpZGViYXIsIGFkZFByb2plY3RMaSwgdWwgfVxuXG59IiwiaW1wb3J0IHsgYWRkIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgbmF2YmFyIGZyb20gXCIuL25hdmJhclwiXG5pbXBvcnQgc2lkZWJhciBmcm9tIFwiLi9zaWRlYmFyXCJcblxuZXhwb3J0IGRlZmF1bHRcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvL0hvb2sgZm9yIGZvciBjb250ZW50XG5cblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwaXp6YScpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpXG4gICAgICAgICAgICBjb25zdCBfbmF2ID0gbmF2YmFyKClcbiAgICAgICAgICAgIGNvbnN0IF9zaWRlYmFyID0gc2lkZWJhcigpLmRpdlNpZGViYXJcblxuXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZChfbmF2KVxuICAgICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZCgncm93JylcbiAgICAgICAgICAgIGRpdi5hcHBlbmQoX3NpZGViYXIpXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZChkaXYpXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd1bCcpLmFwcGVuZChzaWRlYmFyKCkuYWRkUHJvamVjdExpKCkpXG5cblxuXG4gICAgICAgIH0pXG5cblxuICAgIH0pKClcblxuIiwiXG5cbmltcG9ydCB7IGxpYnMgfSBmcm9tIFwiLi9saWJzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuYXYoKSB7XG5cbiAgICAvL0lOSVQgTElCU1xuICAgIGNvbnN0IGxpYnNIZWxwZXIgPSBsaWJzKClcblxuICAgIC8vQ1JFQVRFIEVMRU1FTlRTXG4gICAgY29uc3QgbmF2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmF2JylcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXG4gICAgLy9DTEFTUyBTVFJJTkcgRlJPTSBIVE1MIEJPSUxFUiBQTEFURVxuICAgIGNvbnN0IG5hdkNsYXNzID0gJ25hdmJhciBuYXZiYXItZXhwYW5kLW1kIG5hdmJhci1kYXJrIGJnLWRhcmsnXG4gICAgY29uc3QgZGl2Q2xhc3MgPSAnY29udGFpbmVyLWZsdWlkJ1xuICAgIGNvbnN0IGFDbGFzcyA9ICduYXZiYXItYnJhbmQnXG5cblxuICAgIGxpYnNIZWxwZXIuc3RyaW5nVG9DbGFzcyhuYXYsIG5hdkNsYXNzKVxuICAgIGxpYnNIZWxwZXIuc3RyaW5nVG9DbGFzcyhkaXYsIGRpdkNsYXNzKVxuICAgIGxpYnNIZWxwZXIuc3RyaW5nVG9DbGFzcyhhLCBhQ2xhc3MpXG5cbiAgICAvL0FkZCBUZXh0IENvbnRlbnRcbiAgICBhLmlubmVyVGV4dCA9ICdUb2RvbGlzdCdcblxuICAgIGRpdi5hcHBlbmQoYSlcbiAgICBuYXYuYXBwZW5kKGRpdilcblxuICAgIHJldHVybiBuYXZcblxufSIsIlxuXG5pbXBvcnQgJy4vZG9tJ1xuXG5jb25zb2xlLmxvZygnYW1pdCcpO1xuXG4iXSwibmFtZXMiOlsibGlicyIsInNwbGl0U3RyaW5nIiwic3RyaW5nIiwic3BsaXQiLCJjbGFzc0FkZGVyIiwiZWxlbWVudCIsImFycmF5IiwiZm9yRWFjaCIsImNsYXNzTGlzdCIsImFkZCIsImdldElEIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwic3RyaW5nVG9DbGFzcyIsInNpZGViYXIiLCJsaWJzSGVscGVyIiwiZGl2U2lkZWJhciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImEiLCJpbWciLCJzcGFuIiwiaHIiLCJ1bCIsImRpdkRpdmRlIiwiYnRuRGl2aWRlIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmQiLCJhZGRQcm9qZWN0TGkiLCJsaSIsInN2ZyIsImlubmVyVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiY29uc29sZSIsImxvZyIsImNvbnRlbnQiLCJnZXRFbGVtZW50QnlJZCIsIl9uYXYiLCJuYXYiLCJkaXYiLCJfc2lkZWJhciIsInF1ZXJ5U2VsZWN0b3IiXSwic291cmNlUm9vdCI6IiJ9