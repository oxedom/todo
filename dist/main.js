(()=>{"use strict";function e(){function e(e){return e.split(" ")}function t(e,t){t.forEach((t=>{e.classList.add(t)}))}return{getID:function(){return"_"+Math.random().toString(36).substr(2,9)},classAdder:t,splitString:e,stringToClass:function(n,s){t(n,e(s))}}}const t={events:{},subscribe:function(e,t){console.log(`PUBSUB: someone just subscribed to know about ${e}`),this.events[e]=this.events[e]||[],this.events[e].push(t)},unsubscribe:function(e,t){console.log(`PUBSUB: someone just UNsubscribed from ${e}`),this.events[e]&&(this.events[e]=this.events[e].filter((e=>e!==t)))},publish:function(e,t){console.log(`PUBSUB: Making an broadcast about ${e} with ${t}`),this.events[e]&&this.events[e].forEach((e=>{e(t)}))}};document.addEventListener("DOMContentLoaded",(n=>{console.log("pizza");let s=document.getElementById("content");const o=function(){const t=e(),n=document.createElement("nav"),s=document.createElement("div"),o=document.createElement("a");return t.stringToClass(n,"navbar navbar-expand-md navbar-dark bg-dark"),t.stringToClass(s,"container-fluid"),t.stringToClass(o,"navbar-brand"),o.innerText="Todolist",s.append(o),n.append(s),n}(),a=function(){const n=e(),s=document.createElement("div"),o=document.createElement("a"),a=document.createElement("img"),i=document.createElement("span"),r=document.createElement("hr"),d=document.createElement("ul"),c=document.createElement("form"),l=document.createElement("div"),u=document.createElement("input"),m=document.createElement("button"),p=document.createElement("div"),b=document.createElement("button");n.stringToClass(s,"d-flex flex-column flex-shrink-0 p-3 bg-light col-3 border"),n.stringToClass(a,"m-2"),n.stringToClass(o,"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none"),n.stringToClass(i,"fs-4"),n.stringToClass(d,"nav nav-pills flex-column mb-auto"),n.stringToClass(p,"b-example-divider d-flex justify-content-center"),n.stringToClass(b,"btn btn-primay"),n.stringToClass(c,"form-group m-2 p-1 input-group"),n.stringToClass(u,"form-control"),n.stringToClass(m,"btn btn-outline-primary"),s.style="width: 280px;",i.innerText="Projects",a.style="width: 30px",b.innerText="+ New Project",l.style="width: 150px;",m.innerText="Add",a.setAttribute("src","../sandbox/public/todo.svg"),c.setAttribute("action","submit"),c.addEventListener("submit",(e=>{e.preventDefault(),t.publish("formSubmit",e)})),b.addEventListener("click",(e=>{d.append(g())})),t.subscribe("formSubmit",(function(e){console.log(e)}));const g=e=>{const t=document.createElement("li"),s=document.createElement("a"),o=document.createElement("svg");return n.stringToClass(t,"nav-item m-2"),n.stringToClass(s,"nav-link active"),n.stringToClass(o,"bi me-2"),s.innerText=e,o.setAttribute("width",16),o.setAttribute("height",16),s.append(o),t.append(s),t};return o.append(a,i),p.append(b),l.append(u),c.append(m),c.append(l),s.append(o),s.append(r),s.append(d),s.append(r),s.append(p),s.append(r),s.append(c),{divSidebar:s,addProjectLi:g,ul:d}}().divSidebar;s.append(o);const i=document.createElement("div");i.classList.add("row"),i.append(a),s.append(i)})),console.log("amit")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,